# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#

require 'fakeweb'
require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "selectors"))

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

# Single-line step scoper
When /^(.*) within (.*[^:])$/ do |step, parent|
  with_scope(parent) { When step }
end

# Multi-line step scoper
When /^(.*) within (.*[^:]):$/ do |step, parent, table_or_string|
  with_scope(parent) { When "#{step}:", table_or_string }
end

Given /^(?:|I )am on (.+)$/ do |page_name|

  FakeWeb.register_uri(:any, %r[http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch*], 
    :body => %Q{
<?xml version="1.0" ?>
<!DOCTYPE eSearchResult PUBLIC "-//NLM//DTD eSearchResult, 11 May 2002//EN" "http://www.ncbi.nlm.nih.gov/entrez/query/DTD/eSearch_020511.dtd">
<eSearchResult><Count>58413</Count><RetMax>100</RetMax><RetStart>0</RetStart><IdList>
		<Id>23197953</Id>
		<Id>23197746</Id>
		<Id>23197350</Id>
		<Id>23197349</Id>
		<Id>23197348</Id>
		<Id>23196737</Id>
		<Id>23196598</Id>
		<Id>23196597</Id>
		<Id>23196594</Id>
		<Id>23196501</Id>
		<Id>23196498</Id>
		<Id>23196488</Id>
		<Id>23196487</Id>
		<Id>23196446</Id>
		<Id>23196352</Id>
		<Id>23194278</Id>
		<Id>23194159</Id>
		<Id>23194101</Id>
		<Id>23193986</Id>
		<Id>23193633</Id>
		<Id>23192413</Id>
		<Id>23192335</Id>
		<Id>23190440</Id>
		<Id>23188975</Id>
		<Id>23188841</Id>
		<Id>23188123</Id>
		<Id>23187986</Id>
		<Id>23187300</Id>
		<Id>23185541</Id>
		<Id>23185256</Id>
		<Id>23185092</Id>
		<Id>23184667</Id>
		<Id>23184666</Id>
		<Id>23184269</Id>
		<Id>23183994</Id>
		<Id>23183526</Id>
		<Id>23183081</Id>
		<Id>23182737</Id>
		<Id>23182623</Id>
		<Id>23182175</Id>
		<Id>23181257</Id>
		<Id>23181051</Id>
		<Id>23180468</Id>
		<Id>23180057</Id>
		<Id>23179962</Id>
		<Id>23179682</Id>
		<Id>23179642</Id>
		<Id>23179186</Id>
		<Id>23177505</Id>
		<Id>23177380</Id>
		<Id>23176349</Id>
		<Id>23176335</Id>
		<Id>23163546</Id>
		<Id>23163545</Id>
		<Id>23163544</Id>
		<Id>23163543</Id>
		<Id>23175211</Id>
		<Id>23175005</Id>
		<Id>23174746</Id>
		<Id>23174659</Id>
		<Id>23172998</Id>
		<Id>23172516</Id>
		<Id>23172430</Id>
		<Id>23171751</Id>
		<Id>23171703</Id>
		<Id>23171565</Id>
		<Id>23171280</Id>
		<Id>23170308</Id>
		<Id>23170017</Id>
		<Id>23168979</Id>
		<Id>23168395</Id>
		<Id>23168249</Id>
		<Id>23168071</Id>
		<Id>23166578</Id>
		<Id>23166450</Id>
		<Id>23166446</Id>
		<Id>23166204</Id>
		<Id>23165696</Id>
		<Id>23165695</Id>
		<Id>23165338</Id>
		<Id>23165010</Id>
		<Id>23164653</Id>
		<Id>23163838</Id>
		<Id>23163496</Id>
		<Id>23163207</Id>
		<Id>23153206</Id>
		<Id>23162198</Id>
		<Id>23162193</Id>
		<Id>23162044</Id>
		<Id>23161120</Id>
		<Id>23161035</Id>
		<Id>23160810</Id>
		<Id>23160686</Id>
		<Id>23160230</Id>
		<Id>23160227</Id>
		<Id>23160225</Id>
		<Id>23160091</Id>
		<Id>23159967</Id>
		<Id>23159646</Id>
		<Id>23159522</Id>
	</IdList><TranslationSet><Translation>     <From>headache</From>     <To>"headache"[MeSH Terms] OR "headache"[All Fields]</To>    </Translation></TranslationSet><TranslationStack>   <TermSet>    <Term>"headache"[MeSH Terms]</Term>    <Field>MeSH Terms</Field>    <Count>21053</Count>    <Explode>Y</Explode>   </TermSet>   <TermSet>    <Term>"headache"[All Fields]</Term>    <Field>All Fields</Field>    <Count>58409</Count>    <Explode>Y</Explode>   </TermSet>   <OP>OR</OP>   <OP>GROUP</OP>  </TranslationStack><QueryTranslation>"headache"[MeSH Terms] OR "headache"[All Fields]</QueryTranslation></eSearchResult>

    }  )

  visit path_to(page_name)
end

When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )press "([^"]*)"$/ do |button|
  click_button(button)
end

When /^(?:|I )follow "([^"]*)"$/ do |link|
  click_link(link)
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"$/ do |value, field|
  fill_in(field, :with => value)
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select or option
# based on naming conventions.
#
When /^(?:|I )fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end

When /^(?:|I )select "([^"]*)" from "([^"]*)"$/ do |value, field|
  select(value, :from => field)
end

When /^(?:|I )check "([^"]*)"$/ do |field|
  check(field)
end

When /^(?:|I )uncheck "([^"]*)"$/ do |field|
  uncheck(field)
end

When /^(?:|I )choose "([^"]*)"$/ do |field|
  choose(field)
end

When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"$/ do |path, field|
  attach_file(field, File.expand_path(path))
end

Then /^(?:|I )should see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end

Then /^(?:|I )should see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_xpath('//*', :text => regexp)
  else
    assert page.has_xpath?('//*', :text => regexp)
  end
end

Then /^(?:|I )should not see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_no_content(text)
  else
    assert page.has_no_content?(text)
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_no_xpath('//*', :text => regexp)
  else
    assert page.has_no_xpath?('//*', :text => regexp)
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      field_value.should =~ /#{value}/
    else
      assert_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should not contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should_not
      field_value.should_not =~ /#{value}/
    else
      assert_no_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field should have the error "([^"]*)"$/ do |field, error_message|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')

  form_for_input = element.find(:xpath, 'ancestor::form[1]')
  using_formtastic = form_for_input[:class].include?('formtastic')
  error_class = using_formtastic ? 'error' : 'field_with_errors'

  if classes.respond_to? :should
    classes.should include(error_class)
  else
    assert classes.include?(error_class)
  end

  if page.respond_to?(:should)
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      error_paragraph.should have_content(error_message)
    else
      page.should have_content("#{field.titlecase} #{error_message}")
    end
  else
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      assert error_paragraph.has_content?(error_message)
    else
      assert page.has_content?("#{field.titlecase} #{error_message}")
    end
  end
end

Then /^the "([^"]*)" field should have no error$/ do |field|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')
  if classes.respond_to? :should
    classes.should_not include('field_with_errors')
    classes.should_not include('error')
  else
    assert !classes.include?('field_with_errors')
    assert !classes.include?('error')
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should not be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end
 
Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')} 
  
  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /^show me the page$/ do
  save_and_open_page
end
